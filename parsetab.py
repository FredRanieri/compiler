
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMSUBTRACTIONleftMULTIPLICATIONDIVISIONAND ASSINGMENT CHAR CHARACTER CLOSE_CURLY_BRACKETS CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKETS COLON COMMA DIFFERENT DIGIT DIVISION ELIF ELSE EMPTY EQUAL FLOAT FOR FUNC GREATER GREATEROREQUAL IF INT LESS LESSOREQUAL MULTIPLICATION NOT OPEN_CURLY_BRACKETS OPEN_PARENTHESIS OPEN_SQUARE_BRACKETS OR PERIOD PRINT QUOTATION_MARKS REAL RETURN SCAN SEMICOLON SINGLE_QUOTATION_MARK STRING SUBTRACTION SUM VARIABLE WHILE WORDstatement : VARIABLE ASSINGMENT expressionstatement : expressionexpression : expression SUM expression\n                  | expression SUBTRACTION expression\n                  | expression MULTIPLICATION expression\n                  | expression DIVISION expressionexpression : OPEN_PARENTHESIS expression CLOSE_PARENTHESISexpression : SCAN OPEN_PARENTHESIS VARIABLE CLOSE_PARENTHESISexpression : PRINT OPEN_PARENTHESIS VARIABLE CLOSE_PARENTHESISexpression : INT VARIABLE ASSINGMENT DIGITexpression : FLOAT VARIABLE ASSINGMENT REALexpression : STRING VARIABLE ASSINGMENT QUOTATION_MARKS VARIABLE QUOTATION_MARKSexpression : CHAR VARIABLE ASSINGMENT SINGLE_QUOTATION_MARK VARIABLE SINGLE_QUOTATION_MARKexpression : DIGITexpression : REALexpression : VARIABLE'
    
_lr_action_items = {'VARIABLE':([0,4,7,9,11,12,13,14,15,16,17,20,21,42,43,],[2,19,22,23,24,25,19,19,19,19,19,32,33,44,45,]),'OPEN_PARENTHESIS':([0,4,5,6,13,14,15,16,17,],[4,4,20,21,4,4,4,4,4,]),'SCAN':([0,4,13,14,15,16,17,],[5,5,5,5,5,5,5,]),'PRINT':([0,4,13,14,15,16,17,],[6,6,6,6,6,6,6,]),'INT':([0,4,13,14,15,16,17,],[7,7,7,7,7,7,7,]),'FLOAT':([0,4,13,14,15,16,17,],[9,9,9,9,9,9,9,]),'STRING':([0,4,13,14,15,16,17,],[11,11,11,11,11,11,11,]),'CHAR':([0,4,13,14,15,16,17,],[12,12,12,12,12,12,12,]),'DIGIT':([0,4,13,14,15,16,17,34,],[8,8,8,8,8,8,8,40,]),'REAL':([0,4,13,14,15,16,17,35,],[10,10,10,10,10,10,10,41,]),'$end':([1,2,3,8,10,19,26,27,28,29,30,31,38,39,40,41,46,47,],[0,-16,-2,-14,-15,-16,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'ASSINGMENT':([2,22,23,24,25,],[13,34,35,36,37,]),'SUM':([2,3,8,10,18,19,26,27,28,29,30,31,38,39,40,41,46,47,],[-16,14,-14,-15,14,-16,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'SUBTRACTION':([2,3,8,10,18,19,26,27,28,29,30,31,38,39,40,41,46,47,],[-16,15,-14,-15,15,-16,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'MULTIPLICATION':([2,3,8,10,18,19,26,27,28,29,30,31,38,39,40,41,46,47,],[-16,16,-14,-15,16,-16,16,16,16,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'DIVISION':([2,3,8,10,18,19,26,27,28,29,30,31,38,39,40,41,46,47,],[-16,17,-14,-15,17,-16,17,17,17,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'CLOSE_PARENTHESIS':([8,10,18,19,27,28,29,30,31,32,33,38,39,40,41,46,47,],[-14,-15,31,-16,-3,-4,-5,-6,-7,38,39,-8,-9,-10,-11,-12,-13,]),'QUOTATION_MARKS':([36,44,],[42,46,]),'SINGLE_QUOTATION_MARK':([37,45,],[43,47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,13,14,15,16,17,],[3,18,26,27,28,29,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VARIABLE ASSINGMENT expression','statement',3,'p_statement_assign','myGrammar.py',16),
  ('statement -> expression','statement',1,'p_statement_expr','myGrammar.py',20),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','myGrammar.py',23),
  ('expression -> expression SUBTRACTION expression','expression',3,'p_expression_binop','myGrammar.py',24),
  ('expression -> expression MULTIPLICATION expression','expression',3,'p_expression_binop','myGrammar.py',25),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_binop','myGrammar.py',26),
  ('expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','expression',3,'p_expression_group','myGrammar.py',39),
  ('expression -> SCAN OPEN_PARENTHESIS VARIABLE CLOSE_PARENTHESIS','expression',4,'p_expression_scan','myGrammar.py',43),
  ('expression -> PRINT OPEN_PARENTHESIS VARIABLE CLOSE_PARENTHESIS','expression',4,'p_expression_print','myGrammar.py',47),
  ('expression -> INT VARIABLE ASSINGMENT DIGIT','expression',4,'p_expression_int','myGrammar.py',51),
  ('expression -> FLOAT VARIABLE ASSINGMENT REAL','expression',4,'p_expression_float','myGrammar.py',55),
  ('expression -> STRING VARIABLE ASSINGMENT QUOTATION_MARKS VARIABLE QUOTATION_MARKS','expression',6,'p_expression_string','myGrammar.py',59),
  ('expression -> CHAR VARIABLE ASSINGMENT SINGLE_QUOTATION_MARK VARIABLE SINGLE_QUOTATION_MARK','expression',6,'p_expression_char','myGrammar.py',63),
  ('expression -> DIGIT','expression',1,'p_expression_digit','myGrammar.py',67),
  ('expression -> REAL','expression',1,'p_expression_real','myGrammar.py',71),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','myGrammar.py',75),
]
